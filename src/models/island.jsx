/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: nimzu (https://sketchfab.com/nimzuk)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/foxs-islands-163b68e09fcc47618450150be7785907
Title: Fox's islands
*/

import React, { use, useEffect, useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame, useThree } from '@react-three/fiber'
import { a } from '@react-spring/three';
import islandScence from '../assets/3d/island.glb'

function Island({
    isRotating,
    setIsRotating,
    setCurrentStage,
    ...props
}) {
    const islandRef = useRef();
    const { gl, viewport } = useThree();

    const { nodes, materials } = useGLTF(islandScence);

    const lastX = useRef(0);
    const rotationspeed = useRef(0);
    const dampingFactor = 0.95;


    const handlePointerDown = (event) => {
        event.stopPropagation();
        event.preventDefault();
        setIsRotating(true);

        const clientX = event.touches ? event.touches.clientX : event.clientX;
        lastX.current = clientX;

    }

    const handlePointerUp = (event) => {
        event.stopPropagation();
        event.preventDefault();
        setIsRotating(false);
    }


    const handlePointerMove = (event) => {
        event.preventDefault();
        event.stopPropagation();

        if (isRotating) {
            const clientX = event.touches ? event.touches[0].clientX : event.clientX;
            const delta = (clientX - lastX.current) / viewport.width;
            islandRef.current.rotation.y += delta * 0.01 * Math.PI;
            lastX.current = clientX;
            rotationspeed.current = delta * 0.01 * Math.PI;
        }
    }


    const handleKeyDown = (event) => {
        if (event.key === 'ArrowLeft') {
            if (event.key === 'ArrowLeft')
                if (!isRotating)
                    setIsRotating(true);
            islandRef.current.rotation.y += 0.005 * Math.PI;
            rotationspeed.current = 0.007;
        }
        else if (event.key === 'ArrowRight') {
            if (!isRotating)
                setIsRotating(true);
            islandRef.current.rotation.y -= 0.005 * Math.PI;
            rotationspeed.current = -0.007;
        }
    }



    const handleKeyUp = (event) => {
        if (event.key === 'ArrowLeft' || event.key === 'ArrowRight') {
            setIsRotating(false);
        }
    }


    useEffect(() => {
        const canvas = gl.domElement;
        canvas.addEventListener('pointerdown', handlePointerDown);
        canvas.addEventListener('pointerup', handlePointerUp);
        canvas.addEventListener('pointermove', handlePointerMove);
        window.addEventListener('keydown', handleKeyDown);
        window.addEventListener('keyup', handleKeyUp);
        return () => {
            canvas.removeEventListener('pointerdown', handlePointerDown);
            canvas.removeEventListener('pointerup', handlePointerUp);
            canvas.removeEventListener('pointermove', handlePointerMove);
            window.removeEventListener('keydown', handleKeyDown);
            window.removeEventListener('keyup', handleKeyUp);
        };
    }, [gl, handlePointerDown, handlePointerUp, handlePointerMove])


    useFrame(() => {
        if (!isRotating) {
            rotationspeed.current *= dampingFactor;

            if (Math.abs(rotationspeed.current) < 0.001) {
                rotationspeed.current = 0;
            }

            islandRef.current.rotation.y += rotationspeed.current;
        }
        else {
            const rotation = islandRef.current.rotation.y;
            const normalization = (rotation % (2 * Math.PI) + 2 * Math.PI) % (2 * Math.PI);
            switch (true) {
                case normalization >= 5.45 && normalization <= 5.85:
                    setCurrentStage(1);
                    break;
                case normalization >= 0.85 && normalization <= 1.3:
                    setCurrentStage(3);
                    break;
                case normalization >= 2.4 && normalization <= 2.6:
                    setCurrentStage(2);
                    break;
                case normalization >= 4.25 && normalization <= 4.75:
                    setCurrentStage(1);
                    break;
                default:
                    setCurrentStage(null);
                    break;
            }
        }
    });

    return (
        <a.group ref={islandRef} {...props}>


            <mesh

                geometry={nodes.polySurface944_tree_body_0.geometry}
                material={materials.PaletteMaterial001}
            />
            <mesh

                geometry={nodes.polySurface945_tree1_0.geometry}
                material={materials.PaletteMaterial001}
            />
            <mesh

                geometry={nodes.polySurface946_tree2_0.geometry}
                material={materials.PaletteMaterial001}
            />
            <mesh

                geometry={nodes.polySurface947_tree1_0.geometry}
                material={materials.PaletteMaterial001}
            />
            <mesh

                geometry={nodes.polySurface948_tree_body_0.geometry}
                material={materials.PaletteMaterial001}
            />
            <mesh

                geometry={nodes.polySurface949_tree_body_0.geometry}
                material={materials.PaletteMaterial001}
            />

            <mesh

                geometry={nodes.pCube11_rocks1_0.geometry}
                material={materials.PaletteMaterial001}
            />

        </a.group>
    )
}

export default Island;